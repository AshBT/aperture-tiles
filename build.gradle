// Reads the "buildType" string property from the command line and writes the the cloudera versions
// versions into the ext namespace (which is where build global vars go).  There is a predefined build
// type in gradle.properties that will be applied if nothing is specified here.
//
// ** ANY NEW DEPLOYMENT VARIANTS NEED TO BE ADDED HERE. **
task validateBuildType() {
	switch (buildType) {
		case "cdh5.1.2":
			logger.info "Valid build type found - using $buildType"
			project.ext { // apply project scope to vars, otherwise local to task
				hadoopCommonVersion = "2.3.0-cdh5.1.2"
				hadoopCoreVersion = "2.3.0-mr1-cdh5.1.2"
				hbaseVersion = "0.98.1-cdh5.1.2"
				sparkVersion = "1.0.0-cdh5.1.2"
				dependencyScalaVersion = "2.10"
				scalaVersion = "2.10.3"
			}
		case "cdh5.1.0":
			logger.info "Valid build type found - using $buildType"
			project.ext {
				hadoopCommonVersion = "2.3.0-cdh5.1.0"
				hadoopCoreVersion = "2.3.0-mr1-cdh5.1.0"
				hbaseVersion = "0.98.1-cdh5.1.0"
				sparkVersion = "1.0.0-cdh5.1.0"
				dependencyScalaVersion = "2.10"
				scalaVersion = "2.10.3"
			}
			break
		case "cdh5.0.0":
			logger.info "Valid build type found - using $buildType"
			project.ext {
				hadoopCommonVersion = "2.3.0-cdh5.0.0"
				hadoopCoreVersion = "2.3.0-mr1-cdh5.0.0"
				hbaseVersion = "0.96.1.1-cdh5.0.0"
				sparkVersion = "0.9.0-cdh5.0.0"
				dependencyScalaVersion = "2.10"
				scalaVersion = "2.10.3"
			}
			break
		case "cdh4.6.0":
			logger.info "Valid build type found - using $buildType"
			project.ext {
				hadoopCommonVersion = "2.0.0-cdh4.6.0"
				hadoopCoreVersion = "2.0.0-mr1-cdh4.6.0"
				hbaseVersion = "0.94.15-cdh4.6.0"
				dependencyScalaVersion = "2.10"
				scalaVersion = "2.10.3"
				sparkVersion = "1.0.0"
			}
			break
		default:
			logger.info "Invalid build type $buildType specified - defaulting to cdh5.0"
			project.ext {
				hadoopCommonVersion = "2.3.0-cdh5.0.0"
				hadoopCoreVersion = "2.3.0-mr1-cdh5.0.0"
				hbaseVersion = "0.96.1.1-cdh5.0.0"
				sparkVersion = "0.9.0-cdh5.0.0"
				dependencyScalaVersion = "2.10"
				scalaVersion = "2.10.3"
			}
			buildType = "cdh5.0.0"
	}
}

// Adds hbase dependencies to the supplied project based on the build type.  We can't use the  
// DSL in this context, so we have to go through the lower level DependencyManager APIs.
def addHBaseDependencies(projectRef) {
	// Anything that starts with cdh5 gets the split jars, others assumed to get old-style unified jar
	if (buildType =~ /cdh5\w*/) {
		logger.info("Matched CDH5x cloudera version - using new-style jars")
		projectRef.getDependencies().add("compile", "org.apache.hbase:hbase-common:$hbaseVersion", {
			exclude group: "asm", module: "asm"			
		})
		projectRef.getDependencies().add("compile", "org.apache.hbase:hbase-client:$hbaseVersion", {
			exclude group: "asm", module: "asm"
		})
		projectRef.getDependencies().add("compile", "org.apache.hbase:hbase-server:$hbaseVersion", {
			exclude group: "asm", module: "asm"
			exclude group: "org.mortbay.jetty", module: "servlet-api-2.5"
		})
	} else {
		logger.info("Did not match CDH5x cloudera version - using old style monolithic jar")
		projectRef.getDependencies().add("compile", "org.apache.hbase:hbase:$hbaseVersion", {
			exclude group: "asm", module: "asm"			
		})
	}
}

// General definitions pushed down to all sub-projects
subprojects {			
	// Allows for eclipse project files to be generated
	apply plugin: "eclipse"
	
	// Shared group and version info.  We keep build variant types in the version names so that we get 
	// a set of JARs for each build type written back into the maven repo.
	group = "com.oculusinfo"
	version = "0.4-$buildType-SNAPSHOT"
	
	// Maven repos to check for artifacts
	repositories {
		mavenCentral()
		maven {
			url = "http://maven.oculus.local:8080/archiva/repository/snapshots/"
		}
		maven {
			url = "http://maven.oculus.local:8080/archiva/repository/internal/"
		}
		maven {			
			url = "https://repository.cloudera.com/artifactory/cloudera-repos"
		}
	}
}
