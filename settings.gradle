// tile generation modules
ext.tileGenProjects = [
		'math-utilities',
		'geometric-utilities',
		'factory-utilities',
		'binning-utilities',
		'tile-generation',
		'tile-packaging'
] as Set

ext.tileServerProjects = ['tile-server'] as Set
tileServerProjects.addAll(tileGenProjects)

// tile client/server Projects
ext.clientServerProjects = [
		'math-utilities',
		'geometric-utilities',
		'factory-utilities',
		'binning-utilities',
		'tile-generation',
		'spark-tile-utilities',
		'tile-rendering',
		'tile-service',
		'tile-server',
		'annotation-service',
		'tile-client',
		'tile-client-template',
		'tile-quickstart',
		'tile-examples:julia-demo',
		'tile-examples:julia-demo-live',
		'tile-examples:twitter-topics:twitter-topics-utilities',
		'tile-examples:twitter-topics:twitter-topics-client'
] as Set

// Projects used for live tiling
ext.liveTileGenProjects = ['tile-service', 'spark-tile-utilities'] as Set
liveTileGenProjects.addAll(tileGenProjects)
liveTileGenProjects.remove('tile-packaging')

ext.projects = ""
switch (buildProjects) {
	case "tileGeneration":
		ext.projects = tileGenProjects
		break
	case "clientServer":
		ext.projects = clientServerProjects
		break
	case "tileServer":
		ext.projects = tileServerProjects
		break
	case "liveTiling":
		ext.projects = liveTileGenProjects
		break
	case "all":
		ext.projects = tileGenProjects + clientServerProjects + tileServerProjects
		break
	default:
		throw new StopExecutionException("Unsupported build type '$buildProjects' specified")
}

// List of include sub-projects
projects.each { projectName -> include projectName }

