#
# An example configuration file for the storageutil tool for converting tile pyramids from one I/O type to another 
#

# Sets the type of data to be converted. Can take the values:
# "FileSystem", "HBase", "Zip", "SQLite", "ClassResourceStream"
from.type = HBase

# Sets the location of data to be read. This is either a source
# path or database location. Comment out for HBase. This should 
# end with a /
# from.path = "C:/Users/mkielo/Downloads/"

# Sets the tile pyramid ID to be read
from.ID =brain_graph_nodes8.x.y.v

# If fromtype is "HBase" then zookeeperQuorum, zookeeperPort, and 
# zookeeperMaster must be uncommented and defined.
from.zookeeperQuorum = hadoop-s1.oculus.local
from.zookeeperPort = 2181
from.zookeeperMaster = hadoop-s1.oculus.local:60000


# Sets the type which data will be converted to. Can take the values:
# # "FileSystem", "HBase", SQLite"
to.type = FileSystem

# Sets the location of data to be read. This is either a source
# path or database location. Comment out for HBase. This should 
# end with a /
to.path = \\\\kraken\\XDATA\\ApertureTiles-Tools\\dgiesbrecht\\

# Sets the tile pyramid ID to be written
to.ID =brain_graph_nodes8.x.y.v

# If totype is "HBase" then zookeeperQuorum, zookeeperPort, and 
# zookeeperMaster must be uncommented and set
# to.zookeeperQuorum = ""
# to.zookeeperPort = ""
# to.zookeeperMaster = ""

# Set the start zoom level indicating the level to begin copying.
# from.zoom = 0

# Set the end zoom level indicating the level to end copying
# to.zoom = 8

# Set the serializer used to process tiles. Defaults to DoubleAvroSerializer
# Double Avro is used for bitcoin
# serializer = TwitterDemoAvroSerializer
serializer = com.oculusinfo.binning.io.serialization.impl.DoubleAvroSerializer



# Set the projection used to view the tiles. Takes values:
# "WebMercator" and "AOI". Defaults to WebMercator.
# AOI is used for Bitcoin
# projection = WebMercator

# If projection is "AOI" then minx, maxx, miny, maxy must be set
# miny = 0
# maxy = 500000.000029
# minx = 1.231002905E12
# maxx = 1.3656181700078357E12
 
# Set the block size in which tiles are read/written. Value defaults to 1000
blocksize = 1000